@c Information For Everyone chapter...
@node Information For Everyone
@chapter Information For Everyone

@c AresPackages section...
@node AresPackages
@section AresPackages

@node Purpose
@subsection Purpose

The AresEngine uses a custom game archive format built using EBML, an extensible language akin to XML, but tailored to handling binary data. The Matroska multimedia container is its most prominent client.

You might be wondering why a game engine requires its media to be delivered to it in a custom archive format, as opposed to being exposed "naked" directly through the platform's native file system. There are a number of benefits to using a custom archive format, as well as EMBL specifically.
@sp 1

@itemize
@item
The EMBL format enables extendability for future format changes.
@sp 1

@item
It can be easier to distribute a few files containing many, than many to the end user.
@sp 1

@item
As a single file (*.AresPackage), file seek, open, and load times are reduced.
@sp 1

@item
Providing a layer of abstraction between the actual raw data and the client that requires it allows us to decompress compressed data on the fly. This results in a smaller file, which means a faster disk to RAM transfer. Remember that the disk is slow, while the CPU is much faster.
@sp 1
@end itemize

@node AresPackage Usage
@subsection Usage
The @i{ares-package} tool takes a package manifest file (XML) describing the contents of the package to output. The tool archives the requested files, along with whatever settings that may be required, and outputs the package.

@node Design
@subsection Design
A package manifest is checked against an XML schema (AresPackage.xsd) to verify it is syntactically correct. AresSamplePackage.xml is a sample package. The following diagram is a graphical representation of the schema.
@page
@image{AresPackage/Schema,,9in}

@c @section Fonts
@c @section Colour Scheme
@c @section Theme


